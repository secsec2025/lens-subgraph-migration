type Stat @entity {
  id: ID!
  "Total profiles"
  totalProfiles: BigInt!
  "Total accounts"
  totalAccounts: BigInt!
  "Total Post"
  totalPosts: BigInt!
  "Total Comments"
  totalComments: BigInt!
  "Total Mirrors"
  totalMirror: BigInt!
  "Total Publicactions"
  totalPublications: BigInt!
  "Last Comment created"
  lastCommentCreatedAt: BigInt
  "Last Post created"
  lastPostCreatedAt: BigInt
  "Last Mirror created"
  lastMirrorCreatedAt: BigInt
  "Last Profile created"
  lastProfileCreated: BigInt
}

type Profile @entity {
  id: ID!
  "Number of profile"
  profileId: BigInt!
  "Address from the creator profile"
  creator: Creator!
  "Address from the owner creator profile"
  owner: Account!
  "User attempting to follow the profile should be issued a Follow NFT"
  followNFT: String
  "IPFS has the follow data"
  followNFTURI: String # string
  "Nickname of the profile"
  handle: String # string
  "URI image of the profile"
  imageURI: String # string
  "Date created profile"
  createdAt: BigInt
  "Follow Module Address"
  followModule: String
  "Follow Module Return Data"
  followModuleReturnData: String
  "Dispatcher address allowed to post, comment, mirror, set follow module and change the profile picture on behalf of the owner."
  dispatcher: String
  "Last Date modify profile"
  lastUpdated: BigInt!
  "Total mirrors"
  totalMirrors: BigInt!
  "Total posts"
  totalPosts: BigInt!
  "Total comments"
  totalComments: BigInt!
  "Total Followers"
  totalFollowers: BigInt!
  "Total Following From owner Account"
  totalFollowings: BigInt!
  "List of followers Account"
  followers: [AccountProfileFollow!]! @derivedFrom(field: "profile")
  "List of following Profiles"
  followings: [ProfileProfileFollow!]! @derivedFrom(field: "followProfile")
  "List of comments"
  comments: [Comment!] @derivedFrom(field: "fromProfile")
  "List of post"
  posts: [Post!] @derivedFrom(field: "fromProfile")
  "List of Mirrors"
  mirrors: [Mirror!] @derivedFrom(field: "fromProfile")
}

type Account @entity {
  id: ID!
  "Address"
  address: String!
  "Default Profile"
  defaultProfile: Profile
  "List of Id profiles(String)"
  profilesIds: [String!]!
  "List of Profiles that own this account"
  profiles: [Profile!] @derivedFrom(field: "owner")
  "List of Followings Profiles"
  following: [AccountProfileFollow!]! @derivedFrom(field: "account")
  "List of Following profiles"
  totalFollowings: BigInt!
}

type AccountProfileFollow @entity {
  id: ID!
  account: Account!
  profile: Profile!
  isDeleted: Boolean!
}

type ProfileProfileFollow @entity {
  id: ID!
  profile: Profile!
  followProfile: Profile!
  isDeleted: Boolean!
}

type Creator @entity {
  id: ID!
  "Address"
  address: String!
  "Account Address is whitelisted"
  isWhitelisted: Boolean!
  "Date last modify Address"
  lastUpdated: BigInt!
}

#interface Publication @entity {
#  id: ID!
#  "Profile that created the publication"
#  fromProfile: Profile!
#  "Publication Id"
#  pubId: BigInt!
#  referenceModule: String!
#  referenceModuleReturnData: String
#  "Date of creation"
#  timestamp: BigInt!
#}

type Post @entity {
  id: ID!
  "Profile that created the post"
  fromProfile: Profile!
  "Publication Id"
  pubId: BigInt!
  referenceModule: String!
  referenceModuleReturnData: String
  "URI of the post content"
  contentURI: String!
  collectModule: String!
  collectModuleReturnData: String
  "Date of creation"
  timestamp: BigInt!
}

type Mirror @entity {
  id: ID!
  "Profile that created the post"
  fromProfile: Profile!
  "Publication Id"
  pubId: BigInt!
  referenceModule: String!
  referenceModuleReturnData: String
  profileIdPointed: BigInt!
  pubIdPointed: BigInt!
  "Date of creation"
  timestamp: BigInt!
}

type Comment @entity {
  id: ID!
  "Profile that created the post"
  fromProfile: Profile!
  "Publication Id"
  pubId: BigInt!
  referenceModule: String!
  referenceModuleReturnData: String
  "URI of the post content"
  contentURI: String!
  profileIdPointed: BigInt!
  pubIdPointed: BigInt!
  collectModule: String
  collectModuleReturnData: String
  "Date of creation"
  timestamp: BigInt!
}

type Follow @entity {
  id: ID!
  "Follower Account. "
  fromAccount: Account!

  fromProfileSTR: String!
  "Array of profiles that are followed"
  toProfile: [FollowProfile!] @derivedFrom(field: "follow")
  "Date from when the follow initiated"
  timestamp: BigInt!
}

type FollowProfile @entity {
  id: ID!
  follow: Follow!
  profile: Profile!
}

type FollowNFTTransferred @entity {
  id: ID!
  profileId: BigInt
  followNFTID: BigInt
  from: String
  to: String
  timestamp: BigInt
  data: String
}
